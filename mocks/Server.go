// Code generated by mockery v1.0.0
package mocks

import mock "github.com/stretchr/testify/mock"
import server "github.com/kbuzsaki/cupid/server"
import time "time"

// Server is an autogenerated mock type for the Server type
type Server struct {
	mock.Mock
}

// Acquire provides a mock function with given fields: node
func (_m *Server) Acquire(node server.NodeDescriptor) error {
	ret := _m.Called(node)

	var r0 error
	if rf, ok := ret.Get(0).(func(server.NodeDescriptor) error); ok {
		r0 = rf(node)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CloseNode provides a mock function with given fields: nd
func (_m *Server) CloseNode(nd server.NodeDescriptor) error {
	ret := _m.Called(nd)

	var r0 error
	if rf, ok := ret.Get(0).(func(server.NodeDescriptor) error); ok {
		r0 = rf(nd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CloseSession provides a mock function with given fields: sd
func (_m *Server) CloseSession(sd server.SessionDescriptor) error {
	ret := _m.Called(sd)

	var r0 error
	if rf, ok := ret.Get(0).(func(server.SessionDescriptor) error); ok {
		r0 = rf(sd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetContentAndStat provides a mock function with given fields: node
func (_m *Server) GetContentAndStat(node server.NodeDescriptor) (server.NodeContentAndStat, error) {
	ret := _m.Called(node)

	var r0 server.NodeContentAndStat
	if rf, ok := ret.Get(0).(func(server.NodeDescriptor) server.NodeContentAndStat); ok {
		r0 = rf(node)
	} else {
		r0 = ret.Get(0).(server.NodeContentAndStat)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(server.NodeDescriptor) error); ok {
		r1 = rf(node)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeepAlive provides a mock function with given fields: li, eis, keepAliveDelay
func (_m *Server) KeepAlive(li server.LeaseInfo, eis []server.EventInfo, keepAliveDelay time.Duration) ([]server.Event, error) {
	ret := _m.Called(li, eis, keepAliveDelay)

	var r0 []server.Event
	if rf, ok := ret.Get(0).(func(server.LeaseInfo, []server.EventInfo, time.Duration) []server.Event); ok {
		r0 = rf(li, eis, keepAliveDelay)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]server.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(server.LeaseInfo, []server.EventInfo, time.Duration) error); ok {
		r1 = rf(li, eis, keepAliveDelay)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Open provides a mock function with given fields: sd, path, readOnly, config
func (_m *Server) Open(sd server.SessionDescriptor, path string, readOnly bool, config server.EventsConfig) (server.NodeDescriptor, error) {
	ret := _m.Called(sd, path, readOnly, config)

	var r0 server.NodeDescriptor
	if rf, ok := ret.Get(0).(func(server.SessionDescriptor, string, bool, server.EventsConfig) server.NodeDescriptor); ok {
		r0 = rf(sd, path, readOnly, config)
	} else {
		r0 = ret.Get(0).(server.NodeDescriptor)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(server.SessionDescriptor, string, bool, server.EventsConfig) error); ok {
		r1 = rf(sd, path, readOnly, config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OpenSession provides a mock function with given fields:
func (_m *Server) OpenSession() (server.SessionDescriptor, error) {
	ret := _m.Called()

	var r0 server.SessionDescriptor
	if rf, ok := ret.Get(0).(func() server.SessionDescriptor); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(server.SessionDescriptor)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Release provides a mock function with given fields: node
func (_m *Server) Release(node server.NodeDescriptor) error {
	ret := _m.Called(node)

	var r0 error
	if rf, ok := ret.Get(0).(func(server.NodeDescriptor) error); ok {
		r0 = rf(node)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetContent provides a mock function with given fields: node, content, generation
func (_m *Server) SetContent(node server.NodeDescriptor, content string, generation uint64) (bool, error) {
	ret := _m.Called(node, content, generation)

	var r0 bool
	if rf, ok := ret.Get(0).(func(server.NodeDescriptor, string, uint64) bool); ok {
		r0 = rf(node, content, generation)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(server.NodeDescriptor, string, uint64) error); ok {
		r1 = rf(node, content, generation)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TryAcquire provides a mock function with given fields: node
func (_m *Server) TryAcquire(node server.NodeDescriptor) (bool, error) {
	ret := _m.Called(node)

	var r0 bool
	if rf, ok := ret.Get(0).(func(server.NodeDescriptor) bool); ok {
		r0 = rf(node)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(server.NodeDescriptor) error); ok {
		r1 = rf(node)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
